# 工作流名称
name: Java CI/CD with Docker

# 触发条件：当代码被推送到main分支时触发
on:
  push:
    branches: [ "rae-cicd" ]

# 定义环境变量，方便复用
env:
  # 镜像名称，格式: <仓库用户名>/<应用名>
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/airline-order-course

# 工作流中的任务
jobs:
  # --- 任务1: 构建并推送Docker镜像 ---
  build-and-push:
    # 运行此任务的虚拟机环境
    runs-on: ubuntu-latest
    
    steps:
      # 步骤1: 检出代码
      - name: Checkout repository
        uses: actions/checkout@v3

      # 步骤2: 设置Java环境 (用于Maven构建)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 步骤3: 缓存Maven依赖，加快构建速度
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 步骤4: 使用Maven进行构建和打包
      - name: Build with Maven
        working-directory: ./backend
        run: mvn -B package -DskipTests

      # 步骤5: 登录到Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤6: 提取Docker元数据 (如标签)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=,format=short
            type=raw,value=latest

      # 步骤7: 构建并推送Docker镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # --- 任务2: 部署到服务器 ---
  deploy:
    # 此任务依赖于 'build-and-push' 任务的成功完成
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      # 步骤1: 使用SSH连接到服务器并执行部署脚本
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 从环境变量中获取镜像名称和最新标签
            # 这里的标签是Git Commit的短哈希值，确保部署的是本次构建的镜像
            # export IMAGE_TO_DEPLOY=${{ env.IMAGE_NAME }}:${{ github.sha }}
            export IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
            export IMAGE_TO_DEPLOY="${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
            
            # 执行服务器上的部署脚本，并传入要部署的镜像名称
            bash /home/ubuntu/deploy.sh $IMAGE_TO_DEPLOY